import matplotlib.pyplot as plt


def fnc_sup(x, min1, min2, max1, max2, max_y=1):  # красиво fnc() выглядят
    if min1 <= x <= max1:
        return max_y
    elif min2 < x < min1:
        zero = (min2, 0)
        nex = (min1, max_y)
        y = ((nex[1] - zero[1])*(x - zero[0]))/(nex[0]-zero[0]) - zero[1]
        return y
    elif max1 < x < max2:
        zero = (max2, 0)
        nex = (max1, max_y)
        y = ((nex[1] - zero[1]) * (x - zero[0])) / (nex[0] - zero[0]) - zero[1]
        return y
    return 0


def obrez(args):  # число из нескольких нечетких чисел xD
    alq_x, alq_y = [], []
    d1 = int(int(min([a[0][0] - a[0][2] for a in args])) // 0.01)
    d2 = int(int(max([a[0][0] + a[0][2] for a in args])) // 0.01)
    xwe = int(min([a[0][0] - a[0][2] for a in args]))
    for _ in range(d1, d2):
        t = [fnc_o(xwe, i[0], i[1]) for i in args]
        alq_y.append(max(t))
        alq_x.append(xwe)
        xwe += 0.01
    print(alq_x)
    return alq_x, alq_y


def integral(cordx, cordy):  # находим центр масс
    dlt_x = cordx[1] - cordx[0]
    inte, inte2 = 0, 0
    for i in range(len(cordx)):
        inte += dlt_x * cordy[i]
        inte2 += dlt_x * cordy[i] * cordx[i]
    return inte2 / inte


def fnc_o(x, cord, max_y):  # для obrez()
    min1, max1 = cord[0]-cord[1], cord[0]+cord[1]
    min2, max2 = cord[0]-cord[2], cord[0]+cord[2]
    return fnc_sup(x, min1, min2, max1, max2, max_y=max_y)


def fnc(x, A, k, m):  # для cross()
    min1, max1 = A-k, A+k
    min2, max2 = A-m, A+m
    return fnc_sup(x, min1, min2, max1, max2)


def cross(trap1, trap2):  # нахождение пересечения двух нечетких чисел
    alq_y, alq_x = [], []
    d1, d2 = int(min(trap1[0] - trap1[2], trap2[0] - trap2[2]) // 0.01), int(max(trap1[0] + trap1[2], trap2[0] + trap2[1]) // 0.01)
    xwe = 0.01
    for x in range(int(int(d2 - d1) // 0.01)):
        y_cord1, y_cord2 = fnc(xwe, *trap1), fnc(xwe, *trap2)
        alq_y.append(min(y_cord1, y_cord2)), alq_x.append(xwe)
        xwe += 0.01
    return alq_x[alq_y.index(max(alq_y))], max(alq_y)


class Rule:
    def __init__(self, velocity, angle, output):
        self.velocity = velocity
        self.angle = angle
        self.output = output

    def get_kof(self, cur_v, cur_a, i, ax):
        x1, y1 = cross(self.velocity, cur_v)
        x2, y2 = cross(self.angle, cur_a)

        ax[i][0].plot([self.velocity[0]-self.velocity[2], self.velocity[0]-self.velocity[1], self.velocity[0]+self.velocity[1], self.velocity[0]+self.velocity[2]], [0, 1, 1, 0], linewidth='2.0')
        ax[i][0].plot([cur_v[0]-cur_v[2], cur_v[0]-cur_v[1], cur_v[0]+cur_v[1], cur_v[0]+cur_v[2]], [0, 1, 1, 0], linewidth='2.0')

        ax[i][1].plot([self.angle[0] - self.angle[2], self.angle[0] - self.angle[1], self.angle[0] + self.angle[1], self.angle[0] + self.angle[2]], [0, 1, 1, 0],linewidth='2.0')
        ax[i][1].plot([cur_a[0] - cur_a[2], cur_a[0] - cur_a[1], cur_a[0] + cur_a[1], cur_a[0] + cur_a[2]], [0, 1, 1, 0], linewidth='2.0')

        ax[i][2].plot([self.output[0] - self.output[2], self.output[0] - self.output[1], self.output[0]+self.output[1], self.output[0]+self.output[2]], [0, 1, 1, 0], linewidth='2.0')
        ax[i][2].plot([self.output[0] - self.output[2], self.output[0] - self.output[1], self.output[0]+self.output[1], self.output[0]+self.output[2]], [0, y1 if y1 < y2 else y2, y1 if y1 < y2 else y2, 0], linewidth='2.0')

        return [self.output, y1] if y1 < y2 else [self.output, y2]


class Matrix:
    def __init__(self, args):
        self.rules = args

    def center(self, cur_v, cur_a):
        i = 0
        eva = []
        fig, ax = plt.subplots(nrows=2, ncols=3)
        fig2, ax2 = plt.subplots()
        for rule in self.rules:
            eva.append(rule.get_kof(cur_v, cur_a, i, ax))
            i += 1
        x_o, y_o = obrez([*eva])
        cntr_mass = integral(x_o, y_o)
        ax2.plot([eva[0][0][0]-eva[0][0][2], eva[0][0][0]-eva[0][0][1], eva[0][0][0]+eva[0][0][1], eva[0][0][0]+eva[0][0][2]], [0, eva[0][1], eva[0][1], 0], linewidth='5.0')
        ax2.plot([eva[1][0][0] - eva[1][0][2], eva[1][0][0] - eva[1][0][1], eva[1][0][0] + eva[1][0][1],
                  eva[1][0][0] + eva[1][0][2]], [0, eva[1][1], eva[1][1], 0], linewidth='5.0')
        ax2.plot(x_o, y_o, linewidth='2.0')
        plt.axvline(x=cntr_mass)
        print(cntr_mass)
        plt.show()
        return 1


c1 = Rule([10, 2, 4], [12, 2, 7], [5, 1, 2])
c2 = Rule([5, 2, 3], [15, 3, 4], [6, 2, 4])
m = Matrix([c1, c2])

m.center([17, 3, 5], [24, 4, 8])
